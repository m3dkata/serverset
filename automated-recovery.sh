#!/bin/bash
# Automated Disaster Recovery Script

set -e

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
NC='\033[0m'

log() { echo -e "${GREEN}[$(date +'%H:%M:%S')] $1${NC}"; }
warn() { echo -e "${YELLOW}[WARNING] $1${NC}"; }
error() { echo -e "${RED}[ERROR] $1${NC}"; }
info() { echo -e "${BLUE}[INFO] $1${NC}"; }

# Check if running from live USB
check_environment() {
    if [ ! -d "/mnt/backup" ]; then
        error "Backup –¥–∏—Å–∫ –Ω–µ –µ –º–æ–Ω—Ç–∏—Ä–∞–Ω!"
        echo "–ú–æ–ª—è –º–æ–Ω—Ç–∏—Ä–∞–π—Ç–µ backup –¥–∏—Å–∫–∞ –ø—ä—Ä–≤–æ:"
        echo "mkdir -p /mnt/backup"
        echo "mount /dev/sdX /mnt/backup"
        exit 1
    fi
    
    if [ ! -d "/mnt/backup/system" ]; then
        error "Backup –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è—Ç–∞ –Ω–µ —Å—ä—â–µ—Å—Ç–≤—É–≤–∞!"
        exit 1
    fi
}

# List available backups
list_backups() {
    echo -e "${CYAN}üìã –ù–ê–õ–ò–ß–ù–ò BACKUPS:${NC}"
    echo ""
    
    echo "–ü–™–õ–ù–ò BACKUPS:"
    ls -la /mnt/backup/system/full_* 2>/dev/null | while read line; do
        backup_name=$(echo "$line" | awk '{print $9}')
        backup_date=$(basename "$backup_name" | cut -d'_' -f2-3 | tr '_' ' ')
        backup_size=$(echo "$line" | awk '{print $5}')
        
        if [ -f "$backup_name/system-image.gz" ]; then
            image_size=$(du -h "$backup_name/system-image.gz" | cut -f1)
            echo "  ‚úÖ $backup_date - –û–±—Ä–∞–∑: $image_size"
        fi
    done
    
    echo ""
    echo "–ò–ù–ö–†–ï–ú–ï–ù–¢–ê–õ–ù–ò BACKUPS:"
    ls -la /mnt/backup/system/incr_* 2>/dev/null | while read line; do
        backup_name=$(echo "$line" | awk '{print $9}')
        backup_date=$(basename "$backup_name" | cut -d'_' -f2-3 | tr '_' ' ')
        echo "  üìÅ $backup_date - –ò–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞–ª–µ–Ω"
    done
    
    echo ""
}

# Detect drives
detect_drives() {
    echo -e "${CYAN}üîç –û–¢–ö–†–ò–í–ê–ù–ï –ù–ê –î–ò–°–ö–û–í–ï:${NC}"
    echo ""
    
    lsblk -o NAME,SIZE,TYPE,MODEL | grep -E "nvme|ssd"
    echo ""
    
    NVME_DRIVES=($(lsblk -ndo NAME | grep nvme))
    
    if [ ${#NVME_DRIVES[@]} -lt 2 ]; then
        warn "–ù–∞–º–µ—Ä–µ–Ω–∏ —Å–∞ –ø–æ-–º–∞–ª–∫–æ –æ—Ç 2 NVMe –¥–∏—Å–∫–∞!"
        echo "–ù–∞–ª–∏—á–Ω–∏ –¥–∏—Å–∫–æ–≤–µ: ${NVME_DRIVES[@]}"
    fi
    
    echo "–ù–∞–º–µ—Ä–µ–Ω–∏ NVMe –¥–∏—Å–∫–æ–≤–µ: ${NVME_DRIVES[@]}"
}

# Setup RAID or single disk
setup_storage() {
    echo -e "${CYAN}üíæ –ù–ê–°–¢–†–û–ô–ö–ê –ù–ê –°–™–•–†–ê–ù–ï–ù–ò–ï:${NC}"
    echo ""
    echo "1) –°—ä–∑–¥–∞–≤–∞–Ω–µ –Ω–∞ –Ω–æ–≤ RAID1 (–ø—Ä–µ–ø–æ—Ä—ä—á–∏—Ç–µ–ª–Ω–æ)"
    echo "2) –í—ä–∑—Å—Ç–∞–Ω–æ–≤—è–≤–∞–Ω–µ –Ω–∞ –µ–¥–∏–Ω –¥–∏—Å–∫"
    echo "3) –í—ä–∑—Å—Ç–∞–Ω–æ–≤—è–≤–∞–Ω–µ –Ω–∞ —Å—ä—â–µ—Å—Ç–≤—É–≤–∞—â RAID"
    echo ""
    read -p "–ò–∑–±–æ—Ä (1-3): " storage_choice
    
    case $storage_choice in
        1)
            setup_new_raid
            TARGET_DEVICE="/dev/md0"
            ;;
        2)
            setup_single_disk
            ;;
        3)
            setup_existing_raid
            TARGET_DEVICE="/dev/md0"
            ;;
        *)
            error "–ù–µ–≤–∞–ª–∏–¥–µ–Ω –∏–∑–±–æ—Ä!"
            exit 1
            ;;
    esac
}

# Create new RAID1
setup_new_raid() {
    echo ""
    echo "–ù–∞–ª–∏—á–Ω–∏ –¥–∏—Å–∫–æ–≤–µ:"
    lsblk -o NAME,SIZE,TYPE,MODEL
    echo ""
    
    read -p "–ü—ä—Ä–≤–∏ NVMe –¥–∏—Å–∫ (–Ω–∞–ø—Ä. nvme0n1): " DRIVE1
    read -p "–í—Ç–æ—Ä–∏ NVMe –¥–∏—Å–∫ (–Ω–∞–ø—Ä. nvme1n1): " DRIVE2
    
    DRIVE1="/dev/$DRIVE1"
    DRIVE2="/dev/$DRIVE2"
    
    warn "–í–ù–ò–ú–ê–ù–ò–ï: –í—Å–∏—á–∫–∏ –¥–∞–Ω–Ω–∏ –Ω–∞ $DRIVE1 –∏ $DRIVE2 —â–µ –±—ä–¥–∞—Ç –∏–∑—Ç—Ä–∏—Ç–∏!"
    read -p "–ü—Ä–æ–¥—ä–ª–∂–∞–≤–∞–Ω–µ? (yes/no): " confirm
    
    if [ "$confirm" != "yes" ]; then
        exit 1
    fi
    
    log "–°—ä–∑–¥–∞–≤–∞–Ω–µ –Ω–∞ RAID1..."
    
    # Stop any existing RAID
    mdadm --stop /dev/md0 2>/dev/null || true
    
    # Clear superblocks
    mdadm --zero-superblock "$DRIVE1" 2>/dev/null || true
    mdadm --zero-superblock "$DRIVE2" 2>/dev/null || true
    
    # Create new RAID
    mdadm --create --verbose /dev/md0 --level=1 --raid-devices=2 "$DRIVE1" "$DRIVE2" --assume-clean
    
    log "RAID1 —Å—ä–∑–¥–∞–¥–µ–Ω —É—Å–ø–µ—à–Ω–æ!"
}

# Setup single disk
setup_single_disk() {
    echo ""
    echo "–ù–∞–ª–∏—á–Ω–∏ –¥–∏—Å–∫–æ–≤–µ:"
    lsblk -o NAME,SIZE,TYPE,MODEL
    echo ""
    
    read -p "–ò–∑–±–æ—Ä –Ω–∞ –¥–∏—Å–∫ (–Ω–∞–ø—Ä. nvme0n1): " DISK
    TARGET_DEVICE="/dev/$DISK"
    
    warn "–í–ù–ò–ú–ê–ù–ò–ï: –í—Å–∏—á–∫–∏ –¥–∞–Ω–Ω–∏ –Ω–∞ $TARGET_DEVICE —â–µ –±—ä–¥–∞—Ç –∏–∑—Ç—Ä–∏—Ç–∏!"
    read -p "–ü—Ä–æ–¥—ä–ª–∂–∞–≤–∞–Ω–µ? (yes/no): " confirm
    
    if [ "$confirm" != "yes" ]; then
        exit 1
    fi
    
    log "–©–µ —Å–µ –∏–∑–ø–æ–ª–∑–≤–∞ $TARGET_DEVICE"
}

# Setup existing RAID
setup_existing_raid() {
    log "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞ —Å—ä—â–µ—Å—Ç–≤—É–≤–∞—â RAID..."
    
    if mdadm --detail /dev/md0 >/dev/null 2>&1; then
        log "–ù–∞–º–µ—Ä–µ–Ω —Å—ä—â–µ—Å—Ç–≤—É–≤–∞—â RAID:"
        mdadm --detail /dev/md0
        
        read -p "–ò–∑–ø–æ–ª–∑–≤–∞–Ω–µ –Ω–∞ —Å—ä—â–µ—Å—Ç–≤—É–≤–∞—â–∏—è RAID? (yes/no): " use_existing
        if [ "$use_existing" != "yes" ]; then
            setup_new_raid
        fi
    else
        warn "–ù—è–º–∞ —Å—ä—â–µ—Å—Ç–≤—É–≤–∞—â RAID! –°—ä–∑–¥–∞–≤–∞–Ω–µ –Ω–∞ –Ω–æ–≤..."
        setup_new_raid
    fi
}

# Select backup to restore
select_backup() {
    echo -e "${CYAN}üìã –ò–ó–ë–û–† –ù–ê BACKUP:${NC}"
    echo ""
    
    # List full backups with numbers
    FULL_BACKUPS=($(ls -t /mnt/backup/system/full_* 2>/dev/null))
    
    if [ ${#FULL_BACKUPS[@]} -eq 0 ]; then
        error "–ù—è–º–∞ –Ω–∞–ª–∏—á–Ω–∏ –ø—ä–ª–Ω–∏ backups!"
        exit 1
    fi
    
    echo "–ù–ê–õ–ò–ß–ù–ò –ü–™–õ–ù–ò BACKUPS:"
    for i in "${!FULL_BACKUPS[@]}"; do
        backup_path="${FULL_BACKUPS[$i]}"
        backup_name=$(basename "$backup_path")
        backup_date=$(echo "$backup_name" | cut -d'_' -f2-3 | tr '_' ' ')
        
        if [ -f "$backup_path/system-image.gz" ]; then
            image_size=$(du -h "$backup_path/system-image.gz" | cut -f1)
            echo "  $((i+1))) $backup_date - –†–∞–∑–º–µ—Ä: $image_size"
        fi
    done
    
    echo ""
    read -p "–ò–∑–±–æ—Ä –Ω–∞ backup (1-${#FULL_BACKUPS[@]}): " backup_choice
    
    if [[ "$backup_choice" -lt 1 || "$backup_choice" -gt ${#FULL_BACKUPS[@]} ]]; then
        error "–ù–µ–≤–∞–ª–∏–¥–µ–Ω –∏–∑–±–æ—Ä!"
        exit 1
    fi
    
    SELECTED_BACKUP="${FULL_BACKUPS[$((backup_choice-1))]}"
    BACKUP_IMAGE="$SELECTED_BACKUP/system-image.gz"
    
    if [ ! -f "$BACKUP_IMAGE" ]; then
        error "Backup –æ–±—Ä–∞–∑—ä—Ç –Ω–µ —Å—ä—â–µ—Å—Ç–≤—É–≤–∞: $BACKUP_IMAGE"
        exit 1
    fi
    
    log "–ò–∑–±—Ä–∞–Ω backup: $(basename "$SELECTED_BACKUP")"
}

# Verify backup integrity
verify_backup() {
    echo -e "${CYAN}üîç –ü–†–û–í–ï–†–ö–ê –ù–ê BACKUP:${NC}"
    echo ""
    
    log "–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ü–µ–ª–æ—Å—Ç—Ç–∞ –Ω–∞ backup..."
    
    # Check if backup image exists and is not empty
    if [ ! -s "$BACKUP_IMAGE" ]; then
        error "Backup –æ–±—Ä–∞–∑—ä—Ç –µ –ø—Ä–∞–∑–µ–Ω –∏–ª–∏ –Ω–µ —Å—ä—â–µ—Å—Ç–≤—É–≤–∞!"
        exit 1
    fi
    
    # Test gzip integrity
    if ! gzip -t "$BACKUP_IMAGE"; then
        error "Backup –æ–±—Ä–∞–∑—ä—Ç –µ –ø–æ–≤—Ä–µ–¥–µ–Ω!"
        exit 1
    fi
    
    # Show backup info
    if [ -f "$SELECTED_BACKUP/restore-info.txt" ]; then
        echo "–ò–ù–§–û–†–ú–ê–¶–ò–Ø –ó–ê BACKUP:"
        cat "$SELECTED_BACKUP/restore-info.txt"
        echo ""
    fi
    
    # Calculate sizes
    BACKUP_SIZE=$(du -h "$BACKUP_IMAGE" | cut -f1)
    TARGET_SIZE=$(lsblk -bno SIZE "$TARGET_DEVICE" | head -1)
    TARGET_SIZE_GB=$((TARGET_SIZE / 1024 / 1024 / 1024))
    
    log "Backup —Ä–∞–∑–º–µ—Ä: $BACKUP_SIZE"
    log "–¶–µ–ª–µ–≤–∏ –¥–∏—Å–∫: $TARGET_SIZE_GB GB"
    
    echo ""
    warn "–ü–û–°–õ–ï–î–ù–û –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï!"
    warn "–¢–æ–≤–∞ —â–µ –ø—Ä–µ–∑–∞–ø–∏—à–µ –Ω–∞–ø—ä–ª–Ω–æ $TARGET_DEVICE"
    warn "–í—Å–∏—á–∫–∏ –¥–∞–Ω–Ω–∏ —â–µ –±—ä–¥–∞—Ç –∑–∞–≥—É–±–µ–Ω–∏!"
    echo ""
    
    read -p "–ü–æ—Ç–≤—ä—Ä–∂–¥–µ–Ω–∏–µ –∑–∞ –≤—ä–∑—Å—Ç–∞–Ω–æ–≤—è–≤–∞–Ω–µ (YES): " final_confirm
    
    if [ "$final_confirm" != "YES" ]; then
        log "–í—ä–∑—Å—Ç–∞–Ω–æ–≤—è–≤–∞–Ω–µ—Ç–æ –µ –æ—Ç–∫–∞–∑–∞–Ω–æ"
        exit 0
    fi
}

# Perform the restore
perform_restore() {
    echo -e "${CYAN}üîÑ –í–™–ó–°–¢–ê–ù–û–í–Ø–í–ê–ù–ï –ù–ê –°–ò–°–¢–ï–ú–ê–¢–ê:${NC}"
    echo ""
    
    log "–ó–∞–ø–æ—á–≤–∞–Ω–µ –Ω–∞ –≤—ä–∑—Å—Ç–∞–Ω–æ–≤—è–≤–∞–Ω–µ—Ç–æ..."
    log "–ò–∑—Ç–æ—á–Ω–∏–∫: $BACKUP_IMAGE"
    log "–¶–µ–ª: $TARGET_DEVICE"
    
    # Stop any services that might interfere
    systemctl stop docker 2>/dev/null || true
    
    # Unmount target if mounted
    umount "$TARGET_DEVICE"* 2>/dev/null || true
    
    # Start restore with progress
    log "–í—ä–∑—Å—Ç–∞–Ω–æ–≤—è–≤–∞–Ω–µ –≤ —Ö–æ–¥... (—Ç–æ–≤–∞ –º–æ–∂–µ –¥–∞ –æ—Ç–Ω–µ–º–µ –≤—Ä–µ–º–µ)"
    
    if gunzip -c "$BACKUP_IMAGE" | pv | dd of="$TARGET_DEVICE" bs=64K oflag=direct; then
        log "–í—ä–∑—Å—Ç–∞–Ω–æ–≤—è–≤–∞–Ω–µ—Ç–æ –∑–∞–≤—ä—Ä—à–∏ —É—Å–ø–µ—à–Ω–æ!"
    else
        error "–í—ä–∑—Å—Ç–∞–Ω–æ–≤—è–≤–∞–Ω–µ—Ç–æ –Ω–µ—É—Å–ø–µ—à–Ω–æ!"
        exit 1
    fi
    
    # Sync to ensure all data is written
    sync
    
    log "–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–∞–Ω–µ –Ω–∞ –¥–∞–Ω–Ω–∏—Ç–µ..."
    sleep 3
}

# Post-restore configuration
post_restore_config() {
    echo -e "${CYAN}‚öôÔ∏è –§–ò–ù–ê–õ–ù–ê –ù–ê–°–¢–†–û–ô–ö–ê:${NC}"
    echo ""
    
    # If we restored to a new RAID, update RAID config
    if [ "$TARGET_DEVICE" = "/dev/md0" ]; then
        log "–ê–∫—Ç—É–∞–ª–∏–∑–∏—Ä–∞–Ω–µ –Ω–∞ RAID –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è—Ç–∞..."
        
        # Mount the restored system temporarily
        mkdir -p /mnt/restored
        mount "$TARGET_DEVICE" /mnt/restored
        
        # Update RAID config in the restored system
        if [ -f "$SELECTED_BACKUP/mdadm-scan.conf" ]; then
            cp "$SELECTED_BACKUP/mdadm-scan.conf" /mnt/restored/etc/mdadm/mdadm.conf
        fi
        
        # Update initramfs
        chroot /mnt/restored update-initramfs -u
        
        umount /mnt/restored
        rmdir /mnt/restored
    fi
    
    log "–§–∏–Ω–∞–ª–Ω–∞—Ç–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤—ä—Ä—à–∏!"
}

# Verification after restore
verify_restore() {
    echo -e "${CYAN}‚úÖ –ü–†–û–í–ï–†–ö–ê –°–õ–ï–î –í–™–ó–°–¢–ê–ù–û–í–Ø–í–ê–ù–ï:${NC}"
    echo ""
    
    # Mount and check basic structure
    mkdir -p /mnt/check
    mount "$TARGET_DEVICE" /mnt/check
    
    log "–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤—ä–∑—Å—Ç–∞–Ω–æ–≤–µ–Ω–∞—Ç–∞ —Å–∏—Å—Ç–µ–º–∞..."
    
    # Check critical directories
    CRITICAL_DIRS=("/mnt/check/boot" "/mnt/check/etc" "/mnt/check/usr" "/mnt/check/var")
    
    for dir in "${CRITICAL_DIRS[@]}"; do
        if [ -d "$dir" ]; then
            echo "  ‚úÖ $(basename "$dir")"
        else
            echo "  ‚ùå $(basename "$dir") - –õ–ò–ü–°–í–ê!"
        fi
    done
    
    # Check if GRUB is present
    if [ -d "/mnt/check/boot/grub" ]; then
        echo "  ‚úÖ GRUB bootloader"
    else
        echo "  ‚ùå GRUB bootloader - –õ–ò–ü–°–í–ê!"
    fi
    
    # Check ServerSet scripts
    if [ -f "/mnt/check/usr/local/bin/serverset.sh" ]; then
        echo "  ‚úÖ ServerSet —Å–∫—Ä–∏–ø—Ç–æ–≤–µ"
    else
        echo "  ‚ö†Ô∏è  ServerSet —Å–∫—Ä–∏–ø—Ç–æ–≤–µ - –º–æ–∂–µ –¥–∞ –ª–∏–ø—Å–≤–∞—Ç"
    fi
    
    umount /mnt/check
    rmdir /mnt/check
    
    echo ""
    log "–ü—Ä–æ–≤–µ—Ä–∫–∞—Ç–∞ –∑–∞–≤—ä—Ä—à–∏!"
}

# Show completion message
show_completion() {
    clear
    cat << 'EOF'
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë                                                              ‚ïë
‚ïë           üéâ –í–™–ó–°–¢–ê–ù–û–í–Ø–í–ê–ù–ï–¢–û –ó–ê–í–™–†–®–ò –£–°–ü–ï–®–ù–û! üéâ           ‚ïë
‚ïë                                                              ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
EOF

    echo ""
    echo -e "${GREEN}‚úÖ –°–∏—Å—Ç–µ–º–∞—Ç–∞ –µ –≤—ä–∑—Å—Ç–∞–Ω–æ–≤–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!${NC}"
    echo ""
    echo -e "${CYAN}üìã –°–õ–ï–î–í–ê–©–ò –°–¢–™–ü–ö–ò:${NC}"
    echo "  1. –ü—Ä–µ–º–∞—Ö–Ω–µ—Ç–µ Live USB"
    echo "  2. –†–µ—Å—Ç–∞—Ä—Ç–∏—Ä–∞–π—Ç–µ —Å–∏—Å—Ç–µ–º–∞—Ç–∞"
    echo "  3. –°–∏—Å—Ç–µ–º–∞—Ç–∞ —â–µ —Å—Ç–∞—Ä—Ç–∏—Ä–∞ –Ω–æ—Ä–º–∞–ª–Ω–æ"
    echo "  4. –í—Å–∏—á–∫–∏ –¥–∞–Ω–Ω–∏ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∞ –∑–∞–ø–∞–∑–µ–Ω–∏"
    echo ""
    echo -e "${CYAN}üîß –°–õ–ï–î –†–ï–°–¢–ê–†–¢–ò–†–ê–ù–ï:${NC}"
    echo "  ‚Ä¢ –ü—Ä–æ–≤–µ—Ä–µ—Ç–µ: serverset ‚Üí –æ–ø—Ü–∏—è 9 (–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ç–∞)"
    echo "  ‚Ä¢ –°—Ç–∞—Ä—Ç–∏—Ä–∞–π—Ç–µ: dashboard"
    echo "  ‚Ä¢ –¢–µ—Å—Ç–≤–∞–π—Ç–µ Coolify: http://YOUR_IP:8000"
    echo ""
    echo -e "${YELLOW}üí° –°–™–í–ï–¢:${NC} –ù–∞–ø—Ä–∞–≤–µ—Ç–µ –Ω–æ–≤ backup —Å–ª–µ–¥ –∫–∞—Ç–æ –ø–æ—Ç–≤—ä—Ä–¥–∏—Ç–µ, —á–µ –≤—Å–∏—á–∫–æ —Ä–∞–±–æ—Ç–∏!"
    echo ""
    
    read -p "–†–µ—Å—Ç–∞—Ä—Ç–∏—Ä–∞–Ω–µ —Å–µ–≥–∞? (yes/no): " reboot_now
    
    if [ "$reboot_now" = "yes" ]; then
        log "–†–µ—Å—Ç–∞—Ä—Ç–∏—Ä–∞–Ω–µ..."
        reboot
    else
        log "–ì–æ—Ç–æ–≤–æ! –†–µ—Å—Ç–∞—Ä—Ç–∏—Ä–∞–π—Ç–µ —Ä—ä—á–Ω–æ –∫–æ–≥–∞—Ç–æ —Å—Ç–µ –≥–æ—Ç–æ–≤–∏."
    fi
}

# Main recovery process
main() {
    clear
    cat << 'EOF'
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë                                                              ‚ïë
‚ïë              –ê–í–¢–û–ú–ê–¢–ò–ß–ù–û –í–™–ó–°–¢–ê–ù–û–í–Ø–í–ê–ù–ï                     ‚ïë
‚ïë                                                              ‚ïë
‚ïë                   ServerSet Recovery                        ‚ïë
‚ïë                                                              ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
EOF

    echo ""
    warn "–í–ù–ò–ú–ê–ù–ò–ï: –¢–æ–∑–∏ —Å–∫—Ä–∏–ø—Ç —â–µ –ø—Ä–µ–∑–∞–ø–∏—à–µ –¥–∏—Å–∫–æ–≤–µ!"
    warn "–£–≤–µ—Ä–µ—Ç–µ —Å–µ, —á–µ –∏–º–∞—Ç–µ –ø—Ä–∞–≤–∏–ª–Ω–∏—Ç–µ backups!"
    echo ""
    
    read -p "–ü—Ä–æ–¥—ä–ª–∂–∞–≤–∞–Ω–µ? (yes/no): " start_recovery
    
    if [ "$start_recovery" != "yes" ]; then
        log "–í—ä–∑—Å—Ç–∞–Ω–æ–≤—è–≤–∞–Ω–µ—Ç–æ –µ –æ—Ç–∫–∞–∑–∞–Ω–æ"
        exit 0
    fi
    
    # Step-by-step recovery
    log "–°—Ç—ä–ø–∫–∞ 1/8: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—Ä–µ–¥–∞—Ç–∞..."
    check_environment
    
    log "–°—Ç—ä–ø–∫–∞ 2/8: –ü–æ–∫–∞–∑–≤–∞–Ω–µ –Ω–∞ backups..."
    list_backups
    
    log "–°—Ç—ä–ø–∫–∞ 3/8: –û—Ç–∫—Ä–∏–≤–∞–Ω–µ –Ω–∞ –¥–∏—Å–∫–æ–≤–µ..."
    detect_drives
    
    log "–°—Ç—ä–ø–∫–∞ 4/8: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–∞ —Å—ä—Ö—Ä–∞–Ω–µ–Ω–∏–µ..."
    setup_storage
    
    log "–°—Ç—ä–ø–∫–∞ 5/8: –ò–∑–±–æ—Ä –Ω–∞ backup..."
    select_backup
    
    log "–°—Ç—ä–ø–∫–∞ 6/8: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ backup..."
    verify_backup
    
    log "–°—Ç—ä–ø–∫–∞ 7/8: –í—ä–∑—Å—Ç–∞–Ω–æ–≤—è–≤–∞–Ω–µ..."
    perform_restore
    
    log "–°—Ç—ä–ø–∫–∞ 8/8: –§–∏–Ω–∞–ª–Ω–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞..."
    post_restore_config
    verify_restore
    
    show_completion
}

# Check if running as root
if [[ $EUID -ne 0 ]]; then
    error "–¢–æ–∑–∏ —Å–∫—Ä–∏–ø—Ç —Ç—Ä—è–±–≤–∞ –¥–∞ —Å–µ –∏–∑–ø—ä–ª–Ω–∏ –∫–∞—Ç–æ root"
    exit 1
fi

# Install required tools if missing
if ! command -v pv >/dev/null; then
    log "–ò–Ω—Å—Ç–∞–ª–∏—Ä–∞–Ω–µ –Ω–∞ pv –∑–∞ progress bar..."
    apt update && apt install -y pv
fi

# Start recovery
main "$@"

