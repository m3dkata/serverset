#!/bin/bash
# ServerSet - Interactive Ubuntu Server Management Tool
# Version: 3.1
# Usage: git clone https://github.com/m3dkata/serverset.git && chmod +x serverset/*.sh && ./serverset/serverset.sh

set -e

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m'

# Global variables
SCRIPT_VERSION="3.1"
SCRIPT_DIR="/usr/local/bin"
CONFIG_FILE="/etc/serverset.conf"

# Utility functions
log() { echo -e "${GREEN}[$(date +'%H:%M:%S')] $1${NC}"; }
warn() { echo -e "${YELLOW}[WARNING] $1${NC}"; }
error() { echo -e "${RED}[ERROR] $1${NC}"; }
info() { echo -e "${BLUE}[INFO] $1${NC}"; }

# Check root privileges
check_root() {
    if [[ $EUID -ne 0 ]]; then
        error "–¢–æ–∑–∏ —Å–∫—Ä–∏–ø—Ç —Ç—Ä—è–±–≤–∞ –¥–∞ —Å–µ –∏–∑–ø—ä–ª–Ω–∏ –∫–∞—Ç–æ root"
        echo "–ò–∑–ø–æ–ª–∑–≤–∞–π—Ç–µ: sudo ./serverset.sh"
        exit 1
    fi
}

# Load configuration
load_config() {
    if [ -f "$CONFIG_FILE" ]; then
        source "$CONFIG_FILE"
    fi
}

# Save configuration
save_config() {
    cat > "$CONFIG_FILE" << EOF
# ServerSet Configuration
DRIVE1="$DRIVE1"
DRIVE2="$DRIVE2"
BACKUP_DRIVE="$BACKUP_DRIVE"
ADMIN_EMAIL="$ADMIN_EMAIL"
DOMAIN="$DOMAIN"
INSTALLED="$INSTALLED"
INSTALL_DATE="$(date)"
EOF
}

# Main menu
show_menu() {
    clear
    echo -e "${PURPLE}‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó${NC}"
    echo -e "${PURPLE}‚ïë${NC}                     ${CYAN}SERVERSET v$SCRIPT_VERSION${NC}                        ${PURPLE}‚ïë${NC}"
    echo -e "${PURPLE}‚ïë${NC}              ${YELLOW}Ubuntu Server Management Tool${NC}                ${PURPLE}‚ïë${NC}"
    echo -e "${PURPLE}‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù${NC}"
    echo ""
    
    if [ "$INSTALLED" = "true" ]; then
        echo -e "${GREEN}‚úÖ –°–∏—Å—Ç–µ–º–∞—Ç–∞ –µ –∏–Ω—Å—Ç–∞–ª–∏—Ä–∞–Ω–∞ –∏ –≥–æ—Ç–æ–≤–∞${NC}"
        echo -e "${BLUE}üìÖ –ò–Ω—Å—Ç–∞–ª–∏—Ä–∞–Ω–∞ –Ω–∞: $INSTALL_DATE${NC}"
    else
        echo -e "${YELLOW}‚ö†Ô∏è  –°–∏—Å—Ç–µ–º–∞—Ç–∞ –Ω–µ –µ –∏–Ω—Å—Ç–∞–ª–∏—Ä–∞–Ω–∞${NC}"
    fi
    echo ""
    
    echo -e "${CYAN}üîß –ò–ù–°–¢–ê–õ–ê–¶–ò–Ø –ò –ù–ê–°–¢–†–û–ô–ö–ê:${NC}"
    echo "  1)  –ü—ä–ª–Ω–∞ –∏–Ω—Å—Ç–∞–ª–∞—Ü–∏—è (RAID1 + Coolify + Backup)"
    echo "  2)  –°–∞–º–æ RAID1 –Ω–∞—Å—Ç—Ä–æ–π–∫–∞"
    echo "  3)  –°–∞–º–æ Coolify –∏–Ω—Å—Ç–∞–ª–∞—Ü–∏—è"
    echo "  4)  –°–∞–º–æ Backup —Å–∏—Å—Ç–µ–º–∞"
    echo "  5)  –ó–∞—Å–∏–ª–≤–∞–Ω–µ –Ω–∞ —Å–∏–≥—É—Ä–Ω–æ—Å—Ç—Ç–∞"
    echo ""
    
    echo -e "${CYAN}üìä –ú–û–ù–ò–¢–û–†–ò–ù–ì –ò –°–¢–ê–¢–£–°:${NC}"
    echo "  6)  –°—ä—Ä–≤—ä—Ä–Ω–æ —Ç–∞–±–ª–æ (Dashboard)"
    echo "  7)  RAID —Å—Ç–∞—Ç—É—Å –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ"
    echo "  8)  –°–∏—Å—Ç–µ–º–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"
    echo "  9)  –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ç–∞"
    echo "  10) Health check"
    echo ""
    
    echo -e "${CYAN}üíæ BACKUP –ò –í–™–ó–°–¢–ê–ù–û–í–Ø–í–ê–ù–ï:${NC}"
    echo "  11) –†—ä—á–Ω–æ backup"
    echo "  12) –ê–≤–∞—Ä–∏–π–Ω–æ –≤—ä–∑—Å—Ç–∞–Ω–æ–≤—è–≤–∞–Ω–µ"
    echo "  13) –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ backups"
    echo "  14) –¢–µ—Å—Ç–≤–∞–Ω–µ –Ω–∞ restore"
    echo ""
    
    echo -e "${CYAN}üöÄ COOLIFY –£–ü–†–ê–í–õ–ï–ù–ò–ï:${NC}"
    echo "  15) Coolify —Å—Ç–∞—Ç—É—Å"
    echo "  16) –†–µ—Å—Ç–∞—Ä—Ç–∏—Ä–∞–Ω–µ –Ω–∞ Coolify"
    echo "  17) Coolify –ª–æ–≥–æ–≤–µ"
    echo "  18) Coolify —Ä—ä–∫–æ–≤–æ–¥—Å—Ç–≤–æ –∑–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞"
    echo ""
    
    echo -e "${CYAN}üîí –°–ò–ì–£–†–ù–û–°–¢ –ò SSL:${NC}"
    echo "  19) SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∞"
    echo "  20) Firewall —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ"
    echo "  21) Fail2ban —Å—Ç–∞—Ç—É—Å"
    echo "  22) Security audit"
    echo ""
    
    echo -e "${CYAN}üõ†Ô∏è  –ü–û–î–î–†–™–ñ–ö–ê:${NC}"
    echo "  23) –°–µ–¥–º–∏—á–Ω–∞ –ø–æ–¥–¥—Ä—ä–∂–∫–∞"
    echo "  24) –ê–∫—Ç—É–∞–ª–∏–∑–∏—Ä–∞–Ω–µ –Ω–∞ —Å–∏—Å—Ç–µ–º–∞—Ç–∞"
    echo "  25) Docker –∏–∑—á–∏—Å—Ç–≤–∞–Ω–µ"
    echo "  26) –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥–∏—Å–∫–æ–≤–µ—Ç–µ"
    echo "  27) Performance –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥"
    echo ""
    
    echo -e "${CYAN}üìö –î–û–ö–£–ú–ï–ù–¢–ê–¶–ò–Ø –ò –ü–û–ú–û–©:${NC}"
    echo "  28) –ë—ä—Ä–∑–∏ –∫–æ–º–∞–Ω–¥–∏"
    echo "  29) Troubleshooting —Ä—ä–∫–æ–≤–æ–¥—Å—Ç–≤–æ"
    echo "  30) –ö–∞–ª–µ–Ω–¥–∞—Ä –∑–∞ –ø–æ–¥–¥—Ä—ä–∂–∫–∞"
    echo "  31) –°—ä–∑–¥–∞–≤–∞–Ω–µ –Ω–∞ —Å–ø–µ—à–Ω–∞ –∫–∞—Ä—Ç–∞"
    echo "  32) Recovery –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è"
    echo ""
    
    echo -e "${CYAN}‚öôÔ∏è  –ù–ê–°–¢–†–û–ô–ö–ò:${NC}"
    echo "  33) –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–∞ —Å–∏—Å—Ç–µ–º–∞—Ç–∞"
    echo "  34) –ê–∫—Ç—É–∞–ª–∏–∑–∏—Ä–∞–Ω–µ –Ω–∞ ServerSet"
    echo "  35) –î–µ–∏–Ω—Å—Ç–∞–ª–∏—Ä–∞–Ω–µ"
    echo ""
    
    echo -e "${RED}  0)  –ò–∑—Ö–æ–¥${NC}"
    echo ""
    echo -n "–ò–∑–±–µ—Ä–µ—Ç–µ –æ–ø—Ü–∏—è (0-35): "
}

# Function implementations
full_installation() {
    clear
    echo -e "${PURPLE}‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó${NC}"
    echo -e "${PURPLE}‚ïë${NC}                 ${YELLOW}–ü–™–õ–ù–ê –ò–ù–°–¢–ê–õ–ê–¶–ò–Ø${NC}                        ${PURPLE}‚ïë${NC}"
    echo -e "${PURPLE}‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù${NC}"
    echo ""
    
    if [ "$INSTALLED" = "true" ]; then
        warn "–°–∏—Å—Ç–µ–º–∞—Ç–∞ –≤–µ—á–µ –µ –∏–Ω—Å—Ç–∞–ª–∏—Ä–∞–Ω–∞!"
        read -p "–ò—Å–∫–∞—Ç–µ –ª–∏ –¥–∞ –ø—Ä–µ–∏–Ω—Å—Ç–∞–ª–∏—Ä–∞—Ç–µ? (yes/no): " REINSTALL
        if [ "$REINSTALL" != "yes" ]; then
            return
        fi
    fi
    
    # Get configuration
    echo -e "${CYAN}üîß –ù–ê–°–¢–†–û–ô–ö–ê –ù–ê –î–ò–°–ö–û–í–ï:${NC}"
    lsblk
    echo ""
    read -p "–í—ä–≤–µ–¥–µ—Ç–µ –ø—ä—Ä–≤–∏—è NVMe –¥–∏—Å–∫ (–Ω–∞–ø—Ä. /dev/nvme0n1): " DRIVE1
    read -p "–í—ä–≤–µ–¥–µ—Ç–µ –≤—Ç–æ—Ä–∏—è NVMe –¥–∏—Å–∫ (–Ω–∞–ø—Ä. /dev/nvme1n1): " DRIVE2
    read -p "–í—ä–≤–µ–¥–µ—Ç–µ HDD –∑–∞ backup (–Ω–∞–ø—Ä. /dev/sda): " BACKUP_DRIVE
    read -p "–í—ä–≤–µ–¥–µ—Ç–µ email –∑–∞ –∏–∑–≤–µ—Å—Ç–∏—è (optional): " ADMIN_EMAIL
    read -p "–í—ä–≤–µ–¥–µ—Ç–µ –¥–æ–º–µ–π–Ω (optional): " DOMAIN
    
    warn "–í–ù–ò–ú–ê–ù–ò–ï: –í—Å–∏—á–∫–∏ –¥–∞–Ω–Ω–∏ –Ω–∞ –ø–æ—Å–æ—á–µ–Ω–∏—Ç–µ –¥–∏—Å–∫–æ–≤–µ —â–µ –±—ä–¥–∞—Ç –∏–∑—Ç—Ä–∏—Ç–∏!"
    read -p "–ü—Ä–æ–¥—ä–ª–∂–∞–≤–∞–Ω–µ? (yes/no): " CONFIRM
    
    if [ "$CONFIRM" != "yes" ]; then
        echo "–û–ø–µ—Ä–∞—Ü–∏—è—Ç–∞ –µ –æ—Ç–∫–∞–∑–∞–Ω–∞."
        return
    fi
    
    # Start installation
    log "–ó–∞–ø–æ—á–≤–∞–Ω–µ –Ω–∞ –ø—ä–ª–Ω–∞—Ç–∞ –∏–Ω—Å—Ç–∞–ª–∞—Ü–∏—è..."
    
    # Step 1: System Update
    log "–°—Ç—ä–ø–∫–∞ 1/10: –ê–∫—Ç—É–∞–ª–∏–∑–∏—Ä–∞–Ω–µ –Ω–∞ —Å–∏—Å—Ç–µ–º–∞—Ç–∞..."
    apt update && apt upgrade -y
    
    # Step 2: Install packages
    log "–°—Ç—ä–ø–∫–∞ 2/10: –ò–Ω—Å—Ç–∞–ª–∏—Ä–∞–Ω–µ –Ω–∞ –ø–∞–∫–µ—Ç–∏..."
    apt install -y curl wget git htop nano vim unzip software-properties-common \
        apt-transport-https ca-certificates gnupg lsb-release mdadm rsync cron \
        smartmontools hdparm mailutils postfix ufw fail2ban bc
    
    # Step 3: Configure locale
    log "–°—Ç—ä–ø–∫–∞ 3/10: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–∞ –±—ä–ª–≥–∞—Ä—Å–∫–∏ –µ–∑–∏–∫..."
    locale-gen bg_BG.UTF-8
    update-locale LANG=bg_BG.UTF-8
    timedatectl set-timezone Europe/Sofia
    
    # Step 4: Install Docker
    log "–°—Ç—ä–ø–∫–∞ 4/10: –ò–Ω—Å—Ç–∞–ª–∏—Ä–∞–Ω–µ –Ω–∞ Docker..."
    curl -fsSL https://download.docker.com/linux/ubuntu/gpg | gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
    echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | tee /etc/apt/sources.list.d/docker.list > /dev/null
    apt update
    apt install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
    systemctl start docker
    systemctl enable docker
    
    # Step 5: Setup RAID1
    log "–°—Ç—ä–ø–∫–∞ 5/10: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–∞ RAID1..."
    setup_raid
    
    # Step 6: Setup backup
    log "–°—Ç—ä–ø–∫–∞ 6/10: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–∞ backup..."
    setup_backup
    
    # Step 7: Security
    log "–°—Ç—ä–ø–∫–∞ 7/10: –ó–∞—Å–∏–ª–≤–∞–Ω–µ –Ω–∞ —Å–∏–≥—É—Ä–Ω–æ—Å—Ç—Ç–∞..."
    setup_security
    
    # Step 8: Install Coolify
    log "–°—Ç—ä–ø–∫–∞ 8/10: –ò–Ω—Å—Ç–∞–ª–∏—Ä–∞–Ω–µ –Ω–∞ Coolify..."
    install_coolify
    
    # Step 9: Create scripts
    log "–°—Ç—ä–ø–∫–∞ 9/10: –°—ä–∑–¥–∞–≤–∞–Ω–µ –Ω–∞ —Å–∫—Ä–∏–ø—Ç–æ–≤–µ..."
    create_all_scripts
    
    # Step 10: Final setup
    log "–°—Ç—ä–ø–∫–∞ 10/10: –§–∏–Ω–∞–ª–Ω–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏..."
    setup_cron_jobs
    create_aliases
    
    # Mark as installed
    INSTALLED="true"
    save_config
    
    show_success_message
}

setup_raid() {
    log "–°—ä–∑–¥–∞–≤–∞–Ω–µ –Ω–∞ RAID1 –º–∞—Å–∏–≤..."
    mdadm --create --verbose /dev/md0 --level=1 --raid-devices=2 $DRIVE1 $DRIVE2 --assume-clean
    mkfs.ext4 /dev/md0
    mkdir -p /data
    mount /dev/md0 /data
    echo "/dev/md0 /data ext4 defaults 0 2" >> /etc/fstab
    mdadm --detail --scan >> /etc/mdadm/mdadm.conf
    update-initramfs -u
    log "RAID1 –Ω–∞—Å—Ç—Ä–æ–µ–Ω —É—Å–ø–µ—à–Ω–æ!"
}

setup_backup() {
    log "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–∞ backup –¥–∏—Å–∫–∞..."
    mkfs.ext4 $BACKUP_DRIVE
    mkdir -p /mnt/backup
    mount $BACKUP_DRIVE /mnt/backup
    echo "$BACKUP_DRIVE /mnt/backup ext4 defaults 0 2" >> /etc/fstab
    mkdir -p /mnt/backup/{system,data,logs,recovery-docs}
    log "Backup —Å–∏—Å—Ç–µ–º–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!"
}

setup_security() {
    log "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–∞ firewall..."
    ufw --force reset
    ufw default deny incoming
    ufw default allow outgoing
    ufw allow ssh
    ufw allow 8000/tcp
    ufw allow 80/tcp
    ufw allow 443/tcp
    ufw --force enable
    
    log "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–∞ fail2ban..."
    cat > /etc/fail2ban/jail.local << EOF
[DEFAULT]
bantime = 3600
findtime = 600
maxretry = 3

[sshd]
enabled = true
port = ssh
filter = sshd
logpath = /var/log/auth.log
maxretry = 3
EOF
    systemctl enable fail2ban
    systemctl start fail2ban
    log "–°–∏–≥—É—Ä–Ω–æ—Å—Ç—Ç–∞ –µ –∑–∞—Å–∏–ª–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!"
}

install_coolify() {
    log "–ò–∑—Ç–µ–≥–ª—è–Ω–µ –∏ –∏–Ω—Å—Ç–∞–ª–∏—Ä–∞–Ω–µ –Ω–∞ Coolify..."
    curl -fsSL https://cdn.coollabs.io/coolify/install.sh | bash
    log "Coolify –∏–Ω—Å—Ç–∞–ª–∏—Ä–∞–Ω —É—Å–ø–µ—à–Ω–æ!"
}

create_all_scripts() {
    # System Backup Script
    cat > "$SCRIPT_DIR/system-backup.sh" << 'EOF'
#!/bin/bash
LOG_FILE="/var/log/system-backup.log"
BACKUP_DIR="/mnt/backup/system/$(date +%Y%m%d_%H%M%S)"

log_backup() {
    echo "[$(date +'%Y-%m-%d %H:%M:%S')] $1" | tee -a $LOG_FILE
}

log_backup "–ó–∞–ø–æ—á–≤–∞–Ω–µ –Ω–∞ —Å–∏—Å—Ç–µ–º–Ω–æ backup..."
mkdir -p "$BACKUP_DIR"

# Backup system image
log_backup "–°—ä–∑–¥–∞–≤–∞–Ω–µ –Ω–∞ —Å–∏—Å—Ç–µ–º–µ–Ω –æ–±—Ä–∞–∑..."
dd if=/dev/md0 bs=64K | gzip > "$BACKUP_DIR/system-image.gz"

# Backup configs
log_backup "Backup –Ω–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏..."
tar -czf "$BACKUP_DIR/configs.tar.gz" /etc/ /data/coolify/ 2>/dev/null || true

# Cleanup old backups
log_backup "–ò–∑—á–∏—Å—Ç–≤–∞–Ω–µ –Ω–∞ —Å—Ç–∞—Ä–∏ backups..."
ls -t /mnt/backup/system/ | tail -n +6 | xargs -r rm -rf

log_backup "Backup –∑–∞–≤—ä—Ä—à–∏ —É—Å–ø–µ—à–Ω–æ!"
EOF

    # Health Check Script
    cat > "$SCRIPT_DIR/health-check.sh" << 'EOF'
#!/bin/bash
LOG_FILE="/var/log/health-check.log"

log_health() {
    echo "[$(date +'%Y-%m-%d %H:%M:%S')] $1" | tee -a $LOG_FILE
}

# Check RAID
if ! grep -q "md0.*active.*raid1" /proc/mdstat; then
    log_health "–ö–†–ò–¢–ò–ß–ù–û: RAID –ø—Ä–æ–±–ª–µ–º!"
fi

# Check disk space
df -h | grep -E "/data|/mnt/backup" | while read line; do
    usage=$(echo $line | awk '{print $5}' | sed 's/%//')
    if [[ $usage -gt 85 ]]; then
        log_health "–ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: –í–∏—Å–æ–∫–æ –∏–∑–ø–æ–ª–∑–≤–∞–Ω–µ: $line"
    fi
done

# Check Coolify
if ! curl -f http://localhost:8000 >/dev/null 2>&1; then
    log_health "–ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: Coolify –Ω–µ –æ—Ç–≥–æ–≤–∞—Ä—è"
fi

log_health "Health check –∑–∞–≤—ä—Ä—à–∏."
EOF

    # RAID Manager Script
    cat > "$SCRIPT_DIR/raid-manager.sh" << 'EOF'
#!/bin/bash

show_status() {
    echo "=== RAID –°–¢–ê–¢–£–° ==="
    cat /proc/mdstat
    echo ""
    mdadm --detail /dev/md0
}

replace_disk() {
    echo "=== –ó–ê–ú–Ø–ù–ê –ù–ê –î–ò–°–ö ==="
    cat /proc/mdstat
    echo ""
    read -p "–ù–µ–∏–∑–ø—Ä–∞–≤–µ–Ω –¥–∏—Å–∫: " FAILED_DISK
    read -p "–ù–æ–≤ –¥–∏—Å–∫: " NEW_DISK
    
    mdadm --manage /dev/md0 --remove $FAILED_DISK
    mdadm --manage /dev/md0 --add $NEW_DISK
    echo "Rebuild –∑–∞–ø–æ—á–Ω–∞. –ü—Ä–æ–≤–µ—Ä–µ—Ç–µ: watch cat /proc/mdstat"
}

case "$1" in
    status) show_status ;;
    replace) replace_disk ;;
    *) echo "–£–ø–æ—Ç—Ä–µ–±–∞: $0 {status|replace}" ;;
esac
EOF

    # Server Dashboard Script
    cat > "$SCRIPT_DIR/server-dashboard.sh" << 'EOF'
#!/bin/bash
clear
echo "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó"
echo "‚ïë                    –°–™–†–í–™–†–ù–û –¢–ê–ë–õ–û                            ‚ïë"
echo "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù"
echo ""

echo "üñ•Ô∏è  –°–ò–°–¢–ï–ú–ê:"
echo "   –í—Ä–µ–º–µ: $(date)"
echo "   Uptime: $(uptime -p)"
echo "   Load: $(uptime | awk -F'load average:' '{print $2}')"
echo ""

echo "üíæ –ü–ê–ú–ï–¢:"
free -h | grep -E "Mem|Swap"
echo ""

echo "üíø –î–ò–°–ö–û–í–ï:"
df -h | grep -E "Filesystem|/dev/md0|/mnt"
echo ""

echo "üîÑ RAID:"
if [ -f /proc/mdstat ]; then
    grep -A 3 "md0" /proc/mdstat || echo "   RAID –Ω–µ –µ –Ω–∞–º–µ—Ä–µ–Ω"
fi
echo ""

echo "üê≥ DOCKER:"
if systemctl is-active --quiet docker; then
    echo "   ‚úÖ Docker —Ä–∞–±–æ—Ç–∏"
    echo "   –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä–∏: $(docker ps -q | wc -l) –∞–∫—Ç–∏–≤–Ω–∏"
else
    echo "   ‚ùå Docker –Ω–µ —Ä–∞–±–æ—Ç–∏"
fi
echo ""

echo "üöÄ COOLIFY:"
if curl -f http://localhost:8000 >/dev/null 2>&1; then
    echo "   ‚úÖ Coolify —Ä–∞–±–æ—Ç–∏ - http://$(hostname -I | awk '{print $1}'):8000"
else
    echo "   ‚ùå Coolify –Ω–µ –æ—Ç–≥–æ–≤–∞—Ä—è"
fi
EOF

    # Emergency Restore Script
    cat > "$SCRIPT_DIR/emergency-restore.sh" << 'EOF'
#!/bin/bash
echo "=== –ê–í–ê–†–ò–ô–ù–û –í–™–ó–°–¢–ê–ù–û–í–Ø–í–ê–ù–ï ==="
echo "–ù–∞–ª–∏—á–Ω–∏ backups:"
ls -la /mnt/backup/system/ | grep "^d" | tail -10
echo ""
read -p "Backup –¥–∞—Ç–∞ (YYYYMMDD_HHMMSS): " BACKUP_DATE

BACKUP_PATH="/mnt/backup/system/$BACKUP_DATE"
if [ ! -d "$BACKUP_PATH" ]; then
    echo "–ì–†–ï–®–ö–ê: Backup –Ω–µ —Å—ä—â–µ—Å—Ç–≤—É–≤–∞!"
    exit 1
fi

echo "–í–ù–ò–ú–ê–ù–ò–ï: –¢–æ–≤–∞ —â–µ –ø—Ä–µ–∑–∞–ø–∏—à–µ —Å–∏—Å—Ç–µ–º–∞—Ç–∞!"
read -p "–ü–æ—Ç–≤—ä—Ä–∂–¥–µ–Ω–∏–µ (YES): " CONFIRM
if [ "$CONFIRM" != "YES" ]; then
    exit 1
fi

systemctl stop docker
gunzip -c "$BACKUP_PATH/system-image.gz" | dd of=/dev/md0 bs=64K status=progress
echo "–í—ä–∑—Å—Ç–∞–Ω–æ–≤—è–≤–∞–Ω–µ—Ç–æ –∑–∞–≤—ä—Ä—à–∏! –†–µ—Å—Ç–∞—Ä—Ç–∏—Ä–∞–π—Ç–µ: sudo reboot"
EOF

    chmod +x "$SCRIPT_DIR"/*.sh
}

setup_cron_jobs() {
    (crontab -l 2>/dev/null; echo "0 15 * * 6 $SCRIPT_DIR/system-backup.sh") | crontab -
    (crontab -l 2>/dev/null; echo "0 2 * * * $SCRIPT_DIR/health-check.sh") | crontab -
}

create_aliases() {
    cat >> /root/.bashrc << 'EOF'

# ServerSet aliases
alias dashboard='server-dashboard.sh'
alias raidstatus='raid-manager.sh status'
alias backup='system-backup.sh'
alias serverset='/usr/local/bin/serverset.sh'
EOF
}

show_dashboard() {
    $SCRIPT_DIR/server-dashboard.sh
    echo ""
    read -p "–ù–∞—Ç–∏—Å–Ω–µ—Ç–µ Enter –∑–∞ –≤—Ä—ä—â–∞–Ω–µ –≤ –º–µ–Ω—é—Ç–æ..."
}

show_raid_status() {
    clear
    echo -e "${CYAN}üîÑ RAID –°–¢–ê–¢–£–° –ò –£–ü–†–ê–í–õ–ï–ù–ò–ï${NC}"
    echo ""
    echo "1) –ü–æ–∫–∞–∑–≤–∞–Ω–µ –Ω–∞ RAID —Å—Ç–∞—Ç—É—Å"
    echo "2) –ó–∞–º—è–Ω–∞ –Ω–∞ –Ω–µ–∏–∑–ø—Ä–∞–≤–µ–Ω –¥–∏—Å–∫"
    echo "3) –î–µ—Ç–∞–π–ª–Ω–∞ RAID –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"
    echo "0) –ù–∞–∑–∞–¥"
    echo ""
    read -p "–ò–∑–±–æ—Ä: " choice
    
    case $choice in
        1) $SCRIPT_DIR/raid-manager.sh status; read -p "Enter –∑–∞ –ø—Ä–æ–¥—ä–ª–∂–∞–≤–∞–Ω–µ..." ;;
        2) $SCRIPT_DIR/raid-manager.sh replace; read -p "Enter –∑–∞ –ø—Ä–æ–¥—ä–ª–∂–∞–≤–∞–Ω–µ..." ;;
        3) mdadm --detail /dev/md0; read -p "Enter –∑–∞ –ø—Ä–æ–¥—ä–ª–∂–∞–≤–∞–Ω–µ..." ;;
        0) return ;;
    esac
}

show_system_info() {
    clear
    echo -e "${CYAN}üìä –°–ò–°–¢–ï–ú–ù–ê –ò–ù–§–û–†–ú–ê–¶–ò–Ø${NC}"
    echo ""
    
    echo "üñ•Ô∏è  –•–ê–†–î–£–ï–†:"
    echo "   CPU: $(lscpu | grep 'Model name' | cut -d':' -f2 | xargs)"
    echo "   Cores: $(nproc)"
    echo "   RAM: $(free -h | grep Mem | awk '{print $2}')"
    echo ""
    
    echo "üíæ –°–™–•–†–ê–ù–ï–ù–ò–ï:"
    lsblk -o NAME,SIZE,TYPE,MOUNTPOINT | grep -E "NAME|nvme|sd|md"
    echo ""
    
    echo "üåê –ú–†–ï–ñ–ê:"
    echo "   IP: $(hostname -I | awk '{print $1}')"
    echo "   Gateway: $(ip route | grep default | awk '{print $3}')"
    echo ""
    
    echo "üîß –£–°–õ–£–ì–ò:"
    for service in docker nginx ssh cron ufw fail2ban; do
        if systemctl is-active --quiet $service 2>/dev/null; then
            echo "   ‚úÖ $service"
        else
            echo "   ‚ùå $service"
        fi
    done
    echo ""
    
    read -p "–ù–∞—Ç–∏—Å–Ω–µ—Ç–µ Enter –∑–∞ –≤—Ä—ä—â–∞–Ω–µ..."
}

verify_setup() {
    clear
    echo -e "${CYAN}üîç –ü–†–û–í–ï–†–ö–ê –ù–ê –ù–ê–°–¢–†–û–ô–ö–ê–¢–ê${NC}"
    echo ""
    
    ERRORS=0
    
    # Check RAID
    if grep -q "md0.*active.*raid1" /proc/mdstat; then
        echo "‚úÖ RAID1 —Ä–∞–±–æ—Ç–∏"
    else
        echo "‚ùå RAID –ø—Ä–æ–±–ª–µ–º"
        ((ERRORS++))
    fi
    
    # Check mounts
    if mountpoint -q /data && mountpoint -q /mnt/backup; then
        echo "‚úÖ –î–∏—Å–∫–æ–≤–µ –º–æ–Ω—Ç–∏—Ä–∞–Ω–∏"
    else
        echo "‚ùå –ü—Ä–æ–±–ª–µ–º —Å –º–æ–Ω—Ç–∏—Ä–∞–Ω–µ—Ç–æ"
        ((ERRORS++))
    fi
    
    # Check Docker
    if systemctl is-active --quiet docker; then
        echo "‚úÖ Docker —Ä–∞–±–æ—Ç–∏"
    else
        echo "‚ùå Docker –Ω–µ —Ä–∞–±–æ—Ç–∏"
        ((ERRORS++))
    fi
    
    # Check Coolify
    if curl -f http://localhost:8000 >/dev/null 2>&1; then
        echo "‚úÖ Coolify –æ—Ç–≥–æ–≤–∞—Ä—è"
    else
        echo "‚ö†Ô∏è  Coolify –Ω–µ –æ—Ç–≥–æ–≤–∞—Ä—è"
    fi
    
    # Check scripts
    for script in system-backup.sh health-check.sh raid-manager.sh; do
        if [ -x "$SCRIPT_DIR/$script" ]; then
            echo "‚úÖ $script"
        else
            echo "‚ùå $script –ª–∏–ø—Å–≤–∞"
            ((ERRORS++))
        fi
    done
    
    # Check cron
    if crontab -l | grep -q system-backup.sh; then
        echo "‚úÖ Backup cron –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
    else
        echo "‚ùå Backup cron –ª–∏–ø—Å–≤–∞"
        ((ERRORS++))
    fi
    
    echo ""
    if [ $ERRORS -eq 0 ]; then
        echo -e "${GREEN}üéâ –í—Å–∏—á–∫–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–µ–º–∏–Ω–∞—Ö–∞ —É—Å–ø–µ—à–Ω–æ!${NC}"
    else
        echo -e "${RED}‚ö†Ô∏è  –ù–∞–º–µ—Ä–µ–Ω–∏ —Å–∞ $ERRORS –ø—Ä–æ–±–ª–µ–º–∞${NC}"
    fi
    
    read -p "–ù–∞—Ç–∏—Å–Ω–µ—Ç–µ Enter –∑–∞ –≤—Ä—ä—â–∞–Ω–µ..."
}

manual_backup() {
    clear
    echo -e "${CYAN}üíæ –†–™–ß–ù–û BACKUP${NC}"
    echo ""
    
    if [ ! -f "$SCRIPT_DIR/system-backup.sh" ]; then
        error "Backup —Å–∫—Ä–∏–ø—Ç—ä—Ç –Ω–µ –µ –Ω–∞–º–µ—Ä–µ–Ω!"
        read -p "Enter –∑–∞ –ø—Ä–æ–¥—ä–ª–∂–∞–≤–∞–Ω–µ..."
        return
    fi
    
    log "–°—Ç–∞—Ä—Ç–∏—Ä–∞–Ω–µ –Ω–∞ —Ä—ä—á–Ω–æ backup..."
    $SCRIPT_DIR/system-backup.sh
    
    echo ""
    log "Backup –∑–∞–≤—ä—Ä—à–∏! –ü—Ä–æ–≤–µ—Ä–µ—Ç–µ /mnt/backup/system/"
    read -p "–ù–∞—Ç–∏—Å–Ω–µ—Ç–µ Enter –∑–∞ –≤—Ä—ä—â–∞–Ω–µ..."
}

emergency_restore() {
    clear
    echo -e "${RED}üÜò –ê–í–ê–†–ò–ô–ù–û –í–™–ó–°–¢–ê–ù–û–í–Ø–í–ê–ù–ï${NC}"
    echo ""
    
    warn "–í–ù–ò–ú–ê–ù–ò–ï: –¢–æ–≤–∞ —â–µ –ø—Ä–µ–∑–∞–ø–∏—à–µ —Ü—è–ª–∞—Ç–∞ —Å–∏—Å—Ç–µ–º–∞!"
    read -p "–ü—Ä–æ–¥—ä–ª–∂–∞–≤–∞–Ω–µ? (yes/no): " confirm
    
    if [ "$confirm" = "yes" ]; then
        $SCRIPT_DIR/emergency-restore.sh
    fi
    
    read -p "–ù–∞—Ç–∏—Å–Ω–µ—Ç–µ Enter –∑–∞ –≤—Ä—ä—â–∞–Ω–µ..."
}

check_coolify_installation() {
    if [ -d "/data/coolify" ] && [ -f "/data/coolify/docker-compose.yml" ]; then
        return 0  # Coolify is installed
    else
        return 1  # Coolify is not installed
    fi
}

coolify_management() {
    clear
    echo -e "${CYAN}üöÄ COOLIFY –£–ü–†–ê–í–õ–ï–ù–ò–ï${NC}"
    echo ""
    echo "1) Coolify —Å—Ç–∞—Ç—É—Å"
    echo "2) –†–µ—Å—Ç–∞—Ä—Ç–∏—Ä–∞–Ω–µ –Ω–∞ Coolify"
    echo "3) Coolify –ª–æ–≥–æ–≤–µ"
    echo "4) –°–ø–∏—Ä–∞–Ω–µ –Ω–∞ Coolify"
    echo "5) –°—Ç–∞—Ä—Ç–∏—Ä–∞–Ω–µ –Ω–∞ Coolify"
    echo "0) –ù–∞–∑–∞–¥"
    echo ""
    read -p "–ò–∑–±–æ—Ä: " choice
    
    case $choice in
        1)
            if curl -f http://localhost:8000 >/dev/null 2>&1; then
                echo "‚úÖ Coolify —Ä–∞–±–æ—Ç–∏ –Ω–∞ http://$(hostname -I | awk '{print $1}'):8000"
            else
                echo "‚ùå Coolify –Ω–µ –æ—Ç–≥–æ–≤–∞—Ä—è"
            fi
            ;;
        2)
            if [ -d "/data/coolify" ] && [ -f "/data/coolify/docker-compose.yml" ]; then
                log "–†–µ—Å—Ç–∞—Ä—Ç–∏—Ä–∞–Ω–µ –Ω–∞ Coolify..."
                cd /data/coolify && docker compose restart
            else
                error "Coolify –Ω–µ –µ –∏–Ω—Å—Ç–∞–ª–∏—Ä–∞–Ω –∏–ª–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è—Ç–∞ –Ω–µ –µ –Ω–∞–º–µ—Ä–µ–Ω–∞!"
                echo "–ü—ä—Ç—è—Ç /data/coolify/docker-compose.yml –Ω–µ —Å—ä—â–µ—Å—Ç–≤—É–≤–∞."
            fi
            ;;
        3)
            if [ -d "/data/coolify" ] && [ -f "/data/coolify/docker-compose.yml" ]; then
                log "–ü–æ–∫–∞–∑–≤–∞–Ω–µ –Ω–∞ Coolify –ª–æ–≥–æ–≤–µ..."
                echo "–ù–∞—Ç–∏—Å–Ω–µ—Ç–µ Ctrl+C –∑–∞ –∏–∑—Ö–æ–¥ –æ—Ç –ª–æ–≥–æ–≤–µ—Ç–µ"
                sleep 2
                cd /data/coolify && docker compose logs -f
            else
                error "Coolify –Ω–µ –µ –∏–Ω—Å—Ç–∞–ª–∏—Ä–∞–Ω –∏–ª–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è—Ç–∞ –Ω–µ –µ –Ω–∞–º–µ—Ä–µ–Ω–∞!"
                echo "–ü—ä—Ç—è—Ç /data/coolify/docker-compose.yml –Ω–µ —Å—ä—â–µ—Å—Ç–≤—É–≤–∞."
                echo ""
                echo "–í—ä–∑–º–æ–∂–Ω–∏ –ø—Ä–∏—á–∏–Ω–∏:"
                echo "1. Coolify –Ω–µ –µ –∏–Ω—Å—Ç–∞–ª–∏—Ä–∞–Ω - –∏–∑–ø–æ–ª–∑–≤–∞–π—Ç–µ –æ–ø—Ü–∏—è 3 –æ—Ç –≥–ª–∞–≤–Ω–æ—Ç–æ –º–µ–Ω—é"
                echo "2. Coolify –µ –∏–Ω—Å—Ç–∞–ª–∏—Ä–∞–Ω –≤ –¥—Ä—É–≥–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è"
                echo "3. –ü—Ä–æ–±–ª–µ–º –ø—Ä–∏ –∏–Ω—Å—Ç–∞–ª–∞—Ü–∏—è—Ç–∞"
                echo ""
                echo "–ó–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∏:"
                docker ps -a | grep -i coolify || echo "–ù—è–º–∞ Coolify –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∏"
            fi
            ;;
        4)
            if [ -d "/data/coolify" ] && [ -f "/data/coolify/docker-compose.yml" ]; then
                log "–°–ø–∏—Ä–∞–Ω–µ –Ω–∞ Coolify..."
                cd /data/coolify && docker compose stop
            else
                error "Coolify –Ω–µ –µ –∏–Ω—Å—Ç–∞–ª–∏—Ä–∞–Ω –∏–ª–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è—Ç–∞ –Ω–µ –µ –Ω–∞–º–µ—Ä–µ–Ω–∞!"
            fi
            ;;
        5)
            if [ -d "/data/coolify" ] && [ -f "/data/coolify/docker-compose.yml" ]; then
                log "–°—Ç–∞—Ä—Ç–∏—Ä–∞–Ω–µ –Ω–∞ Coolify..."
                cd /data/coolify && docker compose up -d
            else
                error "Coolify –Ω–µ –µ –∏–Ω—Å—Ç–∞–ª–∏—Ä–∞–Ω –∏–ª–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è—Ç–∞ –Ω–µ –µ –Ω–∞–º–µ—Ä–µ–Ω–∞!"
            fi
            ;;
        0) return ;;
    esac
    
    read -p "–ù–∞—Ç–∏—Å–Ω–µ—Ç–µ Enter –∑–∞ –ø—Ä–æ–¥—ä–ª–∂–∞–≤–∞–Ω–µ..."
}


ssl_setup() {
    clear
    echo -e "${CYAN}üîí SSL –°–ï–†–¢–ò–§–ò–ö–ê–¢ –ù–ê–°–¢–†–û–ô–ö–ê${NC}"
    echo ""
    
    read -p "–î–æ–º–µ–π–Ω: " domain
    read -p "Email: " email
    
    if [ -z "$domain" ] || [ -z "$email" ]; then
        error "–î–æ–º–µ–π–Ω –∏ email —Å–∞ –∑–∞–¥—ä–ª–∂–∏—Ç–µ–ª–Ω–∏!"
        read -p "Enter –∑–∞ –ø—Ä–æ–¥—ä–ª–∂–∞–≤–∞–Ω–µ..."
        return
    fi
    
    log "–ò–Ω—Å—Ç–∞–ª–∏—Ä–∞–Ω–µ –Ω–∞ Certbot..."
    apt install -y certbot nginx
    
    log "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–∞ Nginx..."
    cat > /etc/nginx/sites-available/coolify << EOF
server {
    listen 80;
    server_name $domain;
    
    location / {
        proxy_pass http://localhost:8000;
        proxy_set_header Host \$host;
        proxy_set_header X-Real-IP \$remote_addr;
        proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto \$scheme;
    }
}
EOF
    
    ln -sf /etc/nginx/sites-available/coolify /etc/nginx/sites-enabled/
    rm -f /etc/nginx/sites-enabled/default
    nginx -t && systemctl restart nginx
    
    log "–ü–æ–ª—É—á–∞–≤–∞–Ω–µ –Ω–∞ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç..."
    certbot --nginx -d $domain --email $email --agree-tos --non-interactive
    
    log "SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ä—Ç –µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω! –î–æ—Å—Ç—ä–ø: https://$domain"
    read -p "–ù–∞—Ç–∏—Å–Ω–µ—Ç–µ Enter –∑–∞ –≤—Ä—ä—â–∞–Ω–µ..."
}

show_quick_commands() {
    clear
    echo -e "${CYAN}üìã –ë–™–†–ó–ò –ö–û–ú–ê–ù–î–ò${NC}"
    echo ""
    echo "üñ•Ô∏è  –°–ò–°–¢–ï–ú–ù–ò:"
    echo "   dashboard                - –°—ä—Ä–≤—ä—Ä–Ω–æ —Ç–∞–±–ª–æ"
    echo "   serverset               - –¢–æ–≤–∞ –º–µ–Ω—é"
    echo "   raidstatus              - RAID —Å—Ç–∞—Ç—É—Å"
    echo "   backup                  - –†—ä—á–Ω–æ backup"
    echo ""
    echo "üîÑ RAID:"
    echo "   raid-manager.sh status  - RAID —Å—Ç–∞—Ç—É—Å"
    echo "   raid-manager.sh replace - –ó–∞–º—è–Ω–∞ –Ω–∞ –¥–∏—Å–∫"
    echo "   cat /proc/mdstat        - –ë—ä—Ä–∑ RAID —Å—Ç–∞—Ç—É—Å"
    echo ""
    echo "üê≥ DOCKER:"
    echo "   docker ps               - –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä–∏"
    echo "   docker logs [name]      - –õ–æ–≥–æ–≤–µ"
    echo "   docker system prune -f  - –ò–∑—á–∏—Å—Ç–≤–∞–Ω–µ"
    echo ""
    echo "üöÄ COOLIFY:"
    echo "   cd /data/coolify && docker compose logs -f"
    echo "   cd /data/coolify && docker compose restart"
    echo ""
    echo "üìä –ú–û–ù–ò–¢–û–†–ò–ù–ì:"
    echo "   htop                    - –ü—Ä–æ—Ü–µ—Å–∏"
    echo "   df -h                   - –î–∏—Å–∫–æ–≤–µ"
    echo "   free -h                 - –ü–∞–º–µ—Ç"
    echo ""
    read -p "–ù–∞—Ç–∏—Å–Ω–µ—Ç–µ Enter –∑–∞ –≤—Ä—ä—â–∞–Ω–µ..."
}

weekly_maintenance() {
    clear
    echo -e "${CYAN}üõ†Ô∏è  –°–ï–î–ú–ò–ß–ù–ê –ü–û–î–î–†–™–ñ–ö–ê${NC}"
    echo ""
    
    log "–ê–∫—Ç—É–∞–ª–∏–∑–∏—Ä–∞–Ω–µ –Ω–∞ –ø–∞–∫–µ—Ç–∏..."
    apt update && apt upgrade -y
    
    log "–ò–∑—á–∏—Å—Ç–≤–∞–Ω–µ –Ω–∞ –∫–µ—à..."
    apt autoremove -y
    apt autoclean
    
    log "Docker –∏–∑—á–∏—Å—Ç–≤–∞–Ω–µ..."
    docker system prune -f
    docker volume prune -f
    
    log "–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥–∏—Å–∫–æ–≤–æ—Ç–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ..."
    df -h | grep -E "/data|/mnt/backup" | while read line; do
        usage=$(echo $line | awk '{print $5}' | sed 's/%//')
        if [[ $usage -gt 80 ]]; then
            warn "–í–∏—Å–æ–∫–æ –∏–∑–ø–æ–ª–∑–≤–∞–Ω–µ: $line"
        fi
    done
    
    log "–†–æ—Ç–∞—Ü–∏—è –Ω–∞ –ª–æ–≥–æ–≤–µ..."
    logrotate /etc/logrotate.conf
    
    log "–ê–∫—Ç—É–∞–ª–∏–∑–∏—Ä–∞–Ω–µ –Ω–∞ Coolify..."
    cd /data/coolify && docker compose pull && docker compose up -d
    
    log "–°–µ–¥–º–∏—á–Ω–∞—Ç–∞ –ø–æ–¥–¥—Ä—ä–∂–∫–∞ –∑–∞–≤—ä—Ä—à–∏!"
    read -p "–ù–∞—Ç–∏—Å–Ω–µ—Ç–µ Enter –∑–∞ –≤—Ä—ä—â–∞–Ω–µ..."
}

show_troubleshooting() {
    clear
    echo -e "${CYAN}üîß –û–¢–°–¢–†–ê–ù–Ø–í–ê–ù–ï –ù–ê –ü–†–û–ë–õ–ï–ú–ò${NC}"
    echo ""
    echo "üöÄ COOLIFY –ù–ï –°–ï –ó–ê–†–ï–ñ–î–ê:"
    echo "   1. systemctl status docker"
    echo "   2. cd /data/coolify && docker compose restart"
    echo "   3. cd /data/coolify && docker compose logs -f"
    echo ""
    echo "üîÑ RAID –ü–û–ö–ê–ó–í–ê 'DEGRADED':"
    echo "   1. cat /proc/mdstat"
    echo "   2. mdadm --detail /dev/md0"
    echo "   3. raid-manager.sh replace"
    echo ""
    echo "üíæ BACKUP –ù–ï –†–ê–ë–û–¢–ò:"
    echo "   1. df -h /mnt/backup"
    echo "   2. crontab -l"
    echo "   3. system-backup.sh"
    echo ""
    echo "üê≥ DOCKER –ü–†–û–ë–õ–ï–ú–ò:"
    echo "   1. docker logs CONTAINER_NAME"
    echo "   2. docker stats"
    echo "   3. docker restart CONTAINER_NAME"
    echo ""
    echo "üåê –ú–†–ï–ñ–û–í–ò –ü–†–û–ë–õ–ï–ú–ò:"
    echo "   1. ping google.com"
    echo "   2. ufw status"
    echo "   3. ss -tulpn"
    echo ""
    echo "üíø –î–ò–°–ö–û–í–û–¢–û –ü–†–û–°–¢–†–ê–ù–°–¢–í–û –°–í–™–†–®–í–ê:"
    echo "   1. df -h"
    echo "   2. du -sh /* | sort -hr"
    echo "   3. docker system prune -a"
    echo ""
    read -p "–ù–∞—Ç–∏—Å–Ω–µ—Ç–µ Enter –∑–∞ –≤—Ä—ä—â–∞–Ω–µ..."
}

system_configuration() {
    clear
    echo -e "${CYAN}‚öôÔ∏è  –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –ù–ê –°–ò–°–¢–ï–ú–ê–¢–ê${NC}"
    echo ""
    
    if [ -f "$CONFIG_FILE" ]; then
        echo "–¢–µ–∫—É—â–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:"
        echo "  DRIVE1: $DRIVE1"
        echo "  DRIVE2: $DRIVE2"
        echo "  BACKUP_DRIVE: $BACKUP_DRIVE"
        echo "  ADMIN_EMAIL: $ADMIN_EMAIL"
        echo "  DOMAIN: $DOMAIN"
        echo "  INSTALLED: $INSTALLED"
        echo ""
    fi
    
    echo "1) –ü—Ä–æ–º—è–Ω–∞ –Ω–∞ email"
    echo "2) –ü—Ä–æ–º—è–Ω–∞ –Ω–∞ –¥–æ–º–µ–π–Ω"
    echo "3) –ü–æ–∫–∞–∑–≤–∞–Ω–µ –Ω–∞ –ø—ä–ª–Ω–∞—Ç–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è"
    echo "4) –ù—É–ª–∏—Ä–∞–Ω–µ –Ω–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è—Ç–∞"
    echo "0) –ù–∞–∑–∞–¥"
    echo ""
    read -p "–ò–∑–±–æ—Ä: " choice
    
    case $choice in
        1)
            read -p "–ù–æ–≤ email: " new_email
            ADMIN_EMAIL="$new_email"
            save_config
            log "Email –æ–±–Ω–æ–≤–µ–Ω!"
            ;;
        2)
            read -p "–ù–æ–≤ –¥–æ–º–µ–π–Ω: " new_domain
            DOMAIN="$new_domain"
            save_config
            log "–î–æ–º–µ–π–Ω –æ–±–Ω–æ–≤–µ–Ω!"
            ;;
        3)
            cat "$CONFIG_FILE"
            ;;
        4)
            rm -f "$CONFIG_FILE"
            INSTALLED=""
            log "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è—Ç–∞ –µ –Ω—É–ª–∏—Ä–∞–Ω–∞!"
            ;;
        0) return ;;
    esac
    
    read -p "–ù–∞—Ç–∏—Å–Ω–µ—Ç–µ Enter –∑–∞ –ø—Ä–æ–¥—ä–ª–∂–∞–≤–∞–Ω–µ..."
}
# Add this function before update_serverset()
check_internet() {
    log "–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç –≤—Ä—ä–∑–∫–∞—Ç–∞..."
    
    if ! ping -c 1 8.8.8.8 >/dev/null 2>&1; then
        error "–ù—è–º–∞ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç –≤—Ä—ä–∑–∫–∞!"
        return 1
    fi
    
    if ! ping -c 1 github.com >/dev/null 2>&1; then
        error "GitHub –Ω–µ –µ –¥–æ—Å—Ç—ä–ø–µ–Ω!"
        return 1
    fi
    
    log "–ò–Ω—Ç–µ—Ä–Ω–µ—Ç –≤—Ä—ä–∑–∫–∞—Ç–∞ –µ OK"
    return 0
}


update_serverset() {
    clear
    echo -e "${CYAN}üîÑ –ê–ö–¢–£–ê–õ–ò–ó–ò–†–ê–ù–ï –ù–ê SERVERSET${NC}"
    echo ""
    
    # Check internet connectivity
    if ! check_internet; then
        read -p "–ù–∞—Ç–∏—Å–Ω–µ—Ç–µ Enter –∑–∞ –≤—Ä—ä—â–∞–Ω–µ..."
        return
    fi
    
    log "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞ –∞–∫—Ç—É–∞–ª–∏–∑–∞—Ü–∏–∏..."
    
    # Backup current version
    BACKUP_DIR="/tmp/serverset-backup-$(date +%Y%m%d_%H%M%S)"
    mkdir -p "$BACKUP_DIR"
    
    # Backup current serverset and all scripts
    cp "$0" "$BACKUP_DIR/" 2>/dev/null || true
    cp "$SCRIPT_DIR"/*.sh "$BACKUP_DIR/" 2>/dev/null || true
    
    log "Backup —Å—ä–∑–¥–∞–¥–µ–Ω –≤: $BACKUP_DIR"
    
    # Create temporary directory for new files
    TEMP_DIR="/tmp/serverset-update"
    rm -rf "$TEMP_DIR"
    mkdir -p "$TEMP_DIR"
    
    # All shell scripts in your repository
    SCRIPTS=(
        "serverset.sh"
        "complete-setup.sh"
        "coolify-setup-guide.sh"
        "create-emergency-card.sh"
        "create-recovery-docs.sh"
        "disk-health-monitor.sh"
        "emergency-restore.sh"
        "final-optimization.sh"
        "final-validation.sh"
        "health-check.sh"
        "install-coolify.sh"
        "installation-summary.sh"
        "maintenance-calendar.sh"
        "performance-tuning.sh"
        "post-install-checklist.sh"
        "quick-commands.sh"
        "raid-manager.sh"
        "security-hardening.sh"
        "server-dashboard.sh"
        "setup-backup.sh"
        "setup-cron.sh"
        "setup-raid.sh"
        "setup-server.sh"
        "setup-ssl.sh"
        "success-banner.sh"
        "system-backup.sh"
        "system-info.sh"
        "troubleshooting-guide.sh"
        "verify-setup.sh"
        "weekly-maintenance.sh"
    )
    
    # Download all scripts from GitHub
    log "–ò–∑—Ç–µ–≥–ª—è–Ω–µ –Ω–∞ —Å–∫—Ä–∏–ø—Ç–æ–≤–µ –æ—Ç GitHub..."
    
    DOWNLOADED_COUNT=0
    FAILED_COUNT=0
    
    for script in "${SCRIPTS[@]}"; do
        echo -n "  –ò–∑—Ç–µ–≥–ª—è–Ω–µ –Ω–∞ $script... "
        
        if wget -q -O "$TEMP_DIR/$script" "https://raw.githubusercontent.com/m3dkata/serverset/main/$script"; then
            echo -e "${GREEN}‚úÖ${NC}"
            ((DOWNLOADED_COUNT++))
        else
            echo -e "${RED}‚ùå${NC}"
            ((FAILED_COUNT++))
        fi
    done
    
    echo ""
    log "–ò–∑—Ç–µ–≥–ª–µ–Ω–∏: $DOWNLOADED_COUNT —Ñ–∞–π–ª–∞"
    if [ $FAILED_COUNT -gt 0 ]; then
        warn "–ù–µ—É—Å–ø–µ—à–Ω–∏: $FAILED_COUNT —Ñ–∞–π–ª–∞"
    fi
    
    # Check if main script was downloaded successfully
    if [ ! -f "$TEMP_DIR/serverset.sh" ]; then
        error "–û—Å–Ω–æ–≤–Ω–∏—è—Ç —Å–∫—Ä–∏–ø—Ç –Ω–µ –±–µ—à–µ –∏–∑—Ç–µ–≥–ª–µ–Ω!"
        rm -rf "$TEMP_DIR"
        read -p "–ù–∞—Ç–∏—Å–Ω–µ—Ç–µ Enter –∑–∞ –≤—Ä—ä—â–∞–Ω–µ..."
        return
    fi
    
    # Get new version
    NEW_VERSION=$(grep "SCRIPT_VERSION=" "$TEMP_DIR/serverset.sh" | head -1 | cut -d'"' -f2)
    
    if [ -z "$NEW_VERSION" ]; then
        error "–ù–µ –º–æ–∂–µ –¥–∞ —Å–µ –æ–ø—Ä–µ–¥–µ–ª–∏ –Ω–æ–≤–∞—Ç–∞ –≤–µ—Ä—Å–∏—è!"
        rm -rf "$TEMP_DIR"
        read -p "–ù–∞—Ç–∏—Å–Ω–µ—Ç–µ Enter –∑–∞ –≤—Ä—ä—â–∞–Ω–µ..."
        return
    fi
    
    echo ""
    echo -e "${BLUE}–¢–µ–∫—É—â–∞ –≤–µ—Ä—Å–∏—è: ${YELLOW}$SCRIPT_VERSION${NC}"
    echo -e "${BLUE}–ù–æ–≤–∞ –≤–µ—Ä—Å–∏—è: ${GREEN}$NEW_VERSION${NC}"
    echo ""
    
    # Show downloaded files
    echo -e "${CYAN}–ò–∑—Ç–µ–≥–ª–µ–Ω–∏ —Ñ–∞–π–ª–æ–≤–µ:${NC}"
    ls -la "$TEMP_DIR/" | grep "\.sh$" | awk '{printf "  %-30s %s\n", $9, $5" bytes"}'
    echo ""
    
    if [ "$NEW_VERSION" != "$SCRIPT_VERSION" ]; then
        log "–ù–∞–º–µ—Ä–µ–Ω–∞ –Ω–æ–≤–∞ –≤–µ—Ä—Å–∏—è: $NEW_VERSION"
        read -p "–ê–∫—Ç—É–∞–ª–∏–∑–∏—Ä–∞–Ω–µ –Ω–∞ –≤—Å–∏—á–∫–∏ —Å–∫—Ä–∏–ø—Ç–æ–≤–µ? (yes/no): " confirm
    else
        log "–°—ä—â–∞—Ç–∞ –≤–µ—Ä—Å–∏—è, –Ω–æ –º–æ–∂–µ –¥–∞ –∏–º–∞ –∞–∫—Ç—É–∞–ª–∏–∑–∏—Ä–∞–Ω–∏ —Å–∫—Ä–∏–ø—Ç–æ–≤–µ"
        read -p "–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª–Ω–æ –∞–∫—Ç—É–∞–ª–∏–∑–∏—Ä–∞–Ω–µ –Ω–∞ –≤—Å–∏—á–∫–∏ —Å–∫—Ä–∏–ø—Ç–æ–≤–µ? (yes/no): " confirm
    fi
    
    if [ "$confirm" = "yes" ]; then
        log "–ê–∫—Ç—É–∞–ª–∏–∑–∏—Ä–∞–Ω–µ –Ω–∞ —Ñ–∞–π–ª–æ–≤–µ—Ç–µ..."
        
        UPDATED_COUNT=0
        
        # Update all downloaded scripts
        for script in "${SCRIPTS[@]}"; do
            if [ -f "$TEMP_DIR/$script" ]; then
                # Make executable
                chmod +x "$TEMP_DIR/$script"
                
                if [ "$script" = "serverset.sh" ]; then
                    # Update main script (current running script and the one in SCRIPT_DIR)
                    cp "$TEMP_DIR/$script" "$0"
                    cp "$TEMP_DIR/$script" "$SCRIPT_DIR/$script"
                    echo -e "  ${GREEN}‚úÖ $script (main script)${NC}"
                else
                    # Update other scripts
                    cp "$TEMP_DIR/$script" "$SCRIPT_DIR/$script"
                    echo -e "  ${GREEN}‚úÖ $script${NC}"
                fi
                ((UPDATED_COUNT++))
            fi
        done
        
        echo ""
        log "–ê–∫—Ç—É–∞–ª–∏–∑–∏—Ä–∞–Ω–∏ $UPDATED_COUNT —Å–∫—Ä–∏–ø—Ç–∞!"
        log "Backup –Ω–∞ —Å—Ç–∞—Ä–∏—Ç–µ —Ñ–∞–π–ª–æ–≤–µ: $BACKUP_DIR"
        
        # Update configuration to reflect new version
        if [ "$NEW_VERSION" != "$SCRIPT_VERSION" ]; then
            SCRIPT_VERSION="$NEW_VERSION"
            save_config
        fi
        
        echo ""
        echo -e "${GREEN}üéâ –ê–ö–¢–£–ê–õ–ò–ó–ò–†–ê–ù–ï–¢–û –ó–ê–í–™–†–®–ò –£–°–ü–ï–®–ù–û! üéâ${NC}"
        echo ""
        echo -e "${CYAN}–ö–∞–∫–≤–æ –µ –Ω–æ–≤–æ:${NC}"
        echo "‚Ä¢ –í—Å–∏—á–∫–∏ —Å–∫—Ä–∏–ø—Ç–æ–≤–µ —Å–∞ –∞–∫—Ç—É–∞–ª–∏–∑–∏—Ä–∞–Ω–∏"
        echo "‚Ä¢ –ù–æ–≤–∏ —Ñ—É–Ω–∫—Ü–∏–∏ –∏ –ø–æ–¥–æ–±—Ä–µ–Ω–∏—è"
        echo "‚Ä¢ –ü–æ–ø—Ä–∞–≤–∫–∏ –Ω–∞ –≥—Ä–µ—à–∫–∏"
        echo "‚Ä¢ –ü–æ–¥–æ–±—Ä–µ–Ω–∞ —Å–∏–≥—É—Ä–Ω–æ—Å—Ç –∏ —Å—Ç–∞–±–∏–ª–Ω–æ—Å—Ç"
        echo ""
        echo -e "${YELLOW}–í–∞–∂–Ω–æ:${NC}"
        echo "‚Ä¢ Backup —Ñ–∞–π–ª–æ–≤–µ: $BACKUP_DIR"
        echo "‚Ä¢ –í—Å–∏—á–∫–∏ —Å–∫—Ä–∏–ø—Ç–æ–≤–µ —Å–∞ –≥–æ—Ç–æ–≤–∏ –∑–∞ –∏–∑–ø–æ–ª–∑–≤–∞–Ω–µ"
        echo "‚Ä¢ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è—Ç–∞ –µ –∑–∞–ø–∞–∑–µ–Ω–∞"
        echo ""
        
        read -p "–†–µ—Å—Ç–∞—Ä—Ç–∏—Ä–∞–Ω–µ –Ω–∞ ServerSet —Å –Ω–æ–≤–∞—Ç–∞ –≤–µ—Ä—Å–∏—è? (yes/no): " restart
        
        if [ "$restart" = "yes" ]; then
            rm -rf "$TEMP_DIR"
            log "–†–µ—Å—Ç–∞—Ä—Ç–∏—Ä–∞–Ω–µ —Å –Ω–æ–≤–∞ –≤–µ—Ä—Å–∏—è..."
            sleep 2
            exec "$0"
        fi
    else
        log "–ê–∫—Ç—É–∞–ª–∏–∑–∏—Ä–∞–Ω–µ—Ç–æ –µ –æ—Ç–∫–∞–∑–∞–Ω–æ"
    fi
    
    # Cleanup
    rm -rf "$TEMP_DIR"
    read -p "–ù–∞—Ç–∏—Å–Ω–µ—Ç–µ Enter –∑–∞ –≤—Ä—ä—â–∞–Ω–µ..."
}



uninstall_system() {
    clear
    echo -e "${RED}üóëÔ∏è  –î–ï–ò–ù–°–¢–ê–õ–ò–†–ê–ù–ï${NC}"
    echo ""
    
    warn "–í–ù–ò–ú–ê–ù–ò–ï: –¢–æ–≤–∞ —â–µ –ø—Ä–µ–º–∞—Ö–Ω–µ —Ü—è–ª–∞—Ç–∞ ServerSet –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è!"
    warn "RAID –∏ –¥–∞–Ω–Ω–∏—Ç–µ –Ω—è–º–∞ –¥–∞ –±—ä–¥–∞—Ç –∑–∞—Å–µ–≥–Ω–∞—Ç–∏."
    echo ""
    read -p "–°–∏–≥—É—Ä–Ω–∏ –ª–∏ —Å—Ç–µ? (yes/no): " confirm
    
    if [ "$confirm" != "yes" ]; then
        return
    fi
    
    log "–ü—Ä–µ–º–∞—Ö–≤–∞–Ω–µ –Ω–∞ cron –∑–∞–¥–∞—á–∏..."
    crontab -l | grep -v "system-backup.sh\|health-check.sh" | crontab -
    
    log "–ü—Ä–µ–º–∞—Ö–≤–∞–Ω–µ –Ω–∞ —Å–∫—Ä–∏–ø—Ç–æ–≤–µ..."
    rm -f "$SCRIPT_DIR"/system-backup.sh
    rm -f "$SCRIPT_DIR"/health-check.sh
    rm -f "$SCRIPT_DIR"/raid-manager.sh
    rm -f "$SCRIPT_DIR"/server-dashboard.sh
    rm -f "$SCRIPT_DIR"/emergency-restore.sh
    
    log "–ü—Ä–µ–º–∞—Ö–≤–∞–Ω–µ –Ω–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è..."
    rm -f "$CONFIG_FILE"
    
    log "–ü—Ä–µ–º–∞—Ö–≤–∞–Ω–µ –Ω–∞ –ø—Å–µ–≤–¥–æ–Ω–∏–º–∏..."
    sed -i '/# ServerSet aliases/,+10d' /root/.bashrc
    
    log "–î–µ–∏–Ω—Å—Ç–∞–ª–∏—Ä–∞–Ω–µ—Ç–æ –∑–∞–≤—ä—Ä—à–∏!"
    echo ""
    echo "–ó–∞ –ø—ä–ª–Ω–æ –ø—Ä–µ–º–∞—Ö–≤–∞–Ω–µ –Ω–∞ —Å–∏—Å—Ç–µ–º–∞—Ç–∞:"
    echo "1. –°–ø—Ä–µ—Ç–µ Coolify: cd /data/coolify && docker compose down"
    echo "2. –ü—Ä–µ–º–∞—Ö–Ω–µ—Ç–µ RAID: mdadm --stop /dev/md0"
    echo "3. –§–æ—Ä–º–∞—Ç–∏—Ä–∞–π—Ç–µ –¥–∏—Å–∫–æ–≤–µ—Ç–µ —Ä—ä—á–Ω–æ"
    
    read -p "–ù–∞—Ç–∏—Å–Ω–µ—Ç–µ Enter –∑–∞ –∏–∑—Ö–æ–¥..."
    exit 0
}

show_success_message() {
    clear
    cat << 'EOF'
    ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
    ‚ïë                                                              ‚ïë
    ‚ïë    üéâ –ü–û–ó–î–†–ê–í–õ–ï–ù–ò–Ø! –í–ê–®–ò–Ø–¢ –°–™–†–í–™–† –ï –ì–û–¢–û–í! üéâ              ‚ïë
    ‚ïë                                                              ‚ïë
    ‚ïë  ‚úÖ Ubuntu Server —Å RAID1                                   ‚ïë
    ‚ïë  ‚úÖ Coolify –∑–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è                     ‚ïë
    ‚ïë  ‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏ backups –≤—Å—è–∫–∞ —Å—ä–±–æ—Ç–∞ –≤ 15:00               ‚ïë
    ‚ïë  ‚úÖ –ï–∂–µ–¥–Ω–µ–≤–Ω–∏ health checks –≤ 02:00                        ‚ïë
    ‚ïë  ‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ —Å–∏–≥—É—Ä–Ω–æ—Å—Ç                                  ‚ïë
    ‚ïë  ‚úÖ –ü—ä–ª–Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è                                      ‚ïë
    ‚ïë                                                              ‚ïë
    ‚ïë  üöÄ –ì–æ—Ç–æ–≤ –∑–∞ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ!                                  ‚ïë
    ‚ïë                                                              ‚ïë
    ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
EOF

    echo ""
    echo -e "${CYAN}üåê –î–û–°–¢–™–ü –î–û COOLIFY:${NC}"
    echo "    http://$(hostname -I | awk '{print $1}'):8000"
    echo ""
    echo -e "${CYAN}üìã –ë–™–†–ó–ò –ö–û–ú–ê–ù–î–ò:${NC}"
    echo "    dashboard          - –°—Ç–∞—Ç—É—Å –Ω–∞ —Å—ä—Ä–≤—ä—Ä–∞"
    echo "    serverset          - –¢–æ–≤–∞ –º–µ–Ω—é"
    echo "    raidstatus         - RAID —Å—Ç–∞—Ç—É—Å"
    echo "    backup             - –†—ä—á–Ω–æ backup"
    echo ""
    echo -e "${CYAN}üîî –°–õ–ï–î–í–ê–©–ò –°–¢–™–ü–ö–ò:${NC}"
    echo "    1. –°—ä–∑–¥–∞–π—Ç–µ admin –∞–∫–∞—É–Ω—Ç –≤ Coolify"
    echo "    2. –¢–µ—Å—Ç–≤–∞–π—Ç–µ backup —Å–∏—Å—Ç–µ–º–∞—Ç–∞"
    echo "    3. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –¥–æ–º–µ–π–Ω –∏ SSL (–∞–∫–æ –∏–º–∞—Ç–µ)"
    echo ""
    
    read -p "–ù–∞—Ç–∏—Å–Ω–µ—Ç–µ Enter –∑–∞ –≤—Ä—ä—â–∞–Ω–µ –≤ –º–µ–Ω—é—Ç–æ..."
}

# Main execution
main() {
    check_root
    load_config
    
    # Install serverset command globally
    if [ ! -f "$SCRIPT_DIR/serverset.sh" ]; then
        cp "$0" "$SCRIPT_DIR/serverset.sh"
        chmod +x "$SCRIPT_DIR/serverset.sh"
        
        # Add to PATH if not already there
        if ! grep -q "serverset" /root/.bashrc; then
            echo 'alias serverset="/usr/local/bin/serverset.sh"' >> /root/.bashrc
        fi
    fi
    
    while true; do
        show_menu
        read choice
        
        case $choice in
            1) full_installation ;;
            2) setup_raid ;;
            3) install_coolify ;;
            4) setup_backup ;;
            5) setup_security ;;
            6) show_dashboard ;;
            7) show_raid_status ;;
            8) show_system_info ;;
            9) verify_setup ;;
            10) $SCRIPT_DIR/health-check.sh; read -p "Enter..." ;;
            11) manual_backup ;;
            12) emergency_restore ;;
            13) ls -la /mnt/backup/system/; read -p "Enter..." ;;
            14) echo "Test restore —Ñ—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞"; read -p "Enter..." ;;
            15) coolify_management ;;
            16) 
                if check_coolify_installation; then
                    cd /data/coolify && docker compose restart
                    log "Coolify —Ä–µ—Å—Ç–∞—Ä—Ç–∏—Ä–∞–Ω!"
                else
                    error "Coolify –Ω–µ –µ –∏–Ω—Å—Ç–∞–ª–∏—Ä–∞–Ω!"
                fi
                read -p "Enter..." 
                ;;
            17) 
                if check_coolify_installation; then
                    echo "–ù–∞—Ç–∏—Å–Ω–µ—Ç–µ Ctrl+C –∑–∞ –∏–∑—Ö–æ–¥ –æ—Ç –ª–æ–≥–æ–≤–µ—Ç–µ"
                    sleep 2
                    cd /data/coolify && docker compose logs -f
                else
                    error "Coolify –Ω–µ –µ –∏–Ω—Å—Ç–∞–ª–∏—Ä–∞–Ω!"
                    echo "–ò–∑–ø–æ–ª–∑–≤–∞–π—Ç–µ –æ–ø—Ü–∏—è 3 –∑–∞ –∏–Ω—Å—Ç–∞–ª–∏—Ä–∞–Ω–µ –Ω–∞ Coolify"
                    read -p "Enter..."
                fi
                ;;
            18) 
                if check_coolify_installation; then
                    echo "–û—Ç–≤–æ—Ä–µ—Ç–µ: http://$(hostname -I | awk '{print $1}'):8000"
                else
                    echo "Coolify –Ω–µ –µ –∏–Ω—Å—Ç–∞–ª–∏—Ä–∞–Ω! –ò–∑–ø–æ–ª–∑–≤–∞–π—Ç–µ –æ–ø—Ü–∏—è 3 –∑–∞ –∏–Ω—Å—Ç–∞–ª–∏—Ä–∞–Ω–µ."
                fi
                read -p "Enter..." 
                ;;
            19) ssl_setup ;;
            20) ufw status verbose; read -p "Enter..." ;;
            21) fail2ban-client status; read -p "Enter..." ;;
            22) echo "Security audit –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞"; read -p "Enter..." ;;
            23) weekly_maintenance ;;
            24) apt update && apt upgrade; read -p "Enter..." ;;
            25) docker system prune -af; read -p "Enter..." ;;
            26) smartctl -H /dev/nvme0n1 /dev/nvme1n1; read -p "Enter..." ;;
            27) htop ;;
            28) show_quick_commands ;;
            29) show_troubleshooting ;;
            30) echo "–ö–∞–ª–µ–Ω–¥–∞—Ä –∑–∞ –ø–æ–¥–¥—Ä—ä–∂–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞"; read -p "Enter..." ;;
            31) cat /mnt/backup/EMERGENCY-CONTACT-CARD.txt 2>/dev/null || echo "–ö–∞—Ä—Ç–∞—Ç–∞ –Ω–µ –µ —Å—ä–∑–¥–∞–¥–µ–Ω–∞"; read -p "Enter..." ;;
            32) ls /mnt/backup/recovery-docs/ 2>/dev/null || echo "–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è—Ç–∞ –Ω–µ –µ —Å—ä–∑–¥–∞–¥–µ–Ω–∞"; read -p "Enter..." ;;
            33) system_configuration ;;
            34) update_serverset ;;
            35) uninstall_system ;;
            0) 
                echo -e "${GREEN}–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º, —á–µ –∏–∑–ø–æ–ª–∑–≤–∞—Ç–µ ServerSet!${NC}"
                exit 0
                ;;
            *)
                error "–ù–µ–≤–∞–ª–∏–¥–µ–Ω –∏–∑–±–æ—Ä! –ú–æ–ª—è –∏–∑–±–µ—Ä–µ—Ç–µ 0-35."
                sleep 2
                ;;
        esac
    done
}

# Start the application
main "$@"


